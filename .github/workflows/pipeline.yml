name: Create installers and draft release

on: push

env:
  # fortify-setup package dependency
  APP_REPO_FOLDER: ../
  # fortify-setup package dependency
  RELEASE_FOLDER: ../release
  # fortify-setup package dependency
  ELECTRON_VERSION: '13.6.9'
  # sign-data script dependency
  OUTPUT_FOLDER_PATH: ./release
  # sign-data script dependency
  PRIVATE_KEY_BASE64: ${{ secrets.PRIVATE_KEY_BASE64 }}
  # sign-data script dependency
  PUBLIC_KEY_BASE64: ${{ secrets.PUBLIC_KEY_BASE64 }}
  # fortify-setup clone token
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  # actions/create-release dependency
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  checkout:
    if: >-
      contains(github.event.head_commit.message, '[release]')
    runs-on: ubuntu-18.04
    steps:
      - name: Logging
        run: |
          echo "Let's create the draft release"

  macos:
    name: Create macos installer
    runs-on: macos-10.15
    needs: [checkout]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare app repository
        uses: ./.github/actions/prepare-app-repo
      - name: Prepare fortify-setup repository
        uses: ./.github/actions/prepare-fortify-setup-repo
      - name: Create installer
        run: yarn --cwd ./fortify-setup build
      - name: Sign data
        run: yarn sign_data
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            ./release/*.jws
            ./release/*.pkg

  ubuntu:
    name: Create ubuntu installer
    runs-on: ubuntu-18.04
    needs: [checkout]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install OS dependencies
        run: sudo apt-get install libpcsclite-dev
      - name: Prepare app repository
        uses: ./.github/actions/prepare-app-repo
      - name: Prepare fortify-setup repository
        uses: ./.github/actions/prepare-fortify-setup-repo
      - name: Create installer
        run: yarn --cwd ./fortify-setup build
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: ./release/*.deb

  windows:
    name: Create windows installers
    runs-on: windows-2019
    needs: [checkout]
    strategy:
      matrix:
        platform: [x86, x64]
    env:
      Platform: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: '14.x'
          architecture: ${{ matrix.platform }}
      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1.1
      - name: Prepare app repository
        uses: ./.github/actions/prepare-app-repo
      - name: Prepare fortify-setup repository
        uses: ./.github/actions/prepare-fortify-setup-repo
      - name: Create installer
        run: yarn --cwd ./fortify-setup build
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: ./release/*.msi

  create_release:
    name: Prepare and create draft release
    runs-on: ubuntu-18.04
    needs: [macos, ubuntu, windows]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts

      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Draft release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Get artifact names
        id: getfilename
        run: |
          echo "::set-output name=pkgName::$(ls artifacts/*.pkg | cut -d'/' -f2)"
          echo "::set-output name=debName::$(ls artifacts/*.deb | cut -d'/' -f2)"
          echo "::set-output name=msi64Name::$(ls artifacts/*x64*.msi | cut -d'/' -f2)"
          echo "::set-output name=msi86Name::$(ls artifacts/*x86*.msi | cut -d'/' -f2)"

      - name: Upload .pkg
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ steps.getfilename.outputs.pkgName }}
          asset_name: ${{ steps.getfilename.outputs.pkgName }}
          asset_content_type: application/octet-stream

      - name: Upload .deb
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ steps.getfilename.outputs.debName }}
          asset_name: ${{ steps.getfilename.outputs.debName }}
          asset_content_type: application/octet-stream

      - name: Upload .msi (x64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ steps.getfilename.outputs.msi64Name }}
          asset_name: ${{ steps.getfilename.outputs.msi64Name }}
          asset_content_type: application/octet-stream

      - name: Upload .msi (x86)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ steps.getfilename.outputs.msi86Name }}
          asset_name: ${{ steps.getfilename.outputs.msi86Name }}
          asset_content_type: application/octet-stream

      - name: Upload update.jws
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/update.jws
          asset_name: update.jws
          asset_content_type: application/jose

      - name: Upload card.jws
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/card.jws
          asset_name: card.jws
          asset_content_type: application/jose
